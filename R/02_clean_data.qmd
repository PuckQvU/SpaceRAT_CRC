---
title: "Cleaning the data"
author: "Puck Quarles van Ufford"
format: html
---

## Packages

```{r}
#| message: false
#| label: libraries

library("tidyverse")
```

## Load data

```{r}
#| message: false
#| label: load_data

TCGA_exprs <- read_delim("../data/01_TCGA_exprs.tsv")

cms_labels <- read_delim("../data/01_cms_labels.tsv")
```

## Clean expression data

```{r}
#| label: view_exprs

head(TCGA_exprs)
```

This data does not require additional cleaning steps.

## Clean CMS labels

```{r}
#| label: view_labels

head(cms_labels)
```

Cleaning steps required:

1.  Filter for TCGA data only
2.  Select and rename the relevant columns

```{r}
#| label: clean_labels

cms_labels <- cms_labels |> 
  filter(dataset == "tcga") |> 
  select(c(sample,
           cms = CMS_final_network_plus_RFclassifier_in_nonconsensus_samples))
```

## Quality control

Remove low quality samples based on low read count.

```{r}
#| label: QC_read_count

TCGA_exprs_long <- TCGA_exprs |> 
  pivot_longer(cols = -feature,
               names_to = "sample",
               values_to = "log_counts") |> 
  group_by(sample) |> 
  summarise(reads = sum(log_counts)) |> 
  ungroup()

read_limit <- TCGA_exprs_long |> 
  summarise(mean_reads = mean(reads), sd_reads = sd(reads)) |> 
  mutate(cutoff = mean_reads - 3*sd_reads) |> 
  pull(cutoff)

TCGA_exprs_long |>   
  ggplot(mapping = aes(x = sample, 
                       y = reads,
                       fill = reads < read_limit)) +
  geom_col() + 
  geom_hline(yintercept = read_limit) +
  scale_fill_manual(values = setNames(c('darkred', 'gray'), c(T, F)))+
  theme_minimal() +
  theme(legend.position = "None")  

samples_QC <- TCGA_exprs_long |> 
  filter(reads > read_limit) |> 
  pull(sample)

TCGA_exprs <- TCGA_exprs |> 
  select(c(feature, samples_QC))

cms_labels <- cms_labels |> 
  filter(sample %in% samples_QC)
```

## Match expression data and CMS labels

Ensure that the expression data and CMS labels contain the same samples in the same order.

```{r}
#| label: match_data

length(setdiff(colnames(TCGA_exprs), "feature")) 
length(cms_labels$sample)

all(setdiff(colnames(TCGA_exprs), "feature") %in% cms_labels$sample)

cms_labels <- cms_labels |> 
  filter(sample %in% setdiff(colnames(TCGA_exprs), "feature"))

TCGA_exprs <- TCGA_exprs |> 
  relocate(c("feature", cms_labels$sample))

identical(cms_labels$sample, setdiff(colnames(TCGA_exprs), "feature"))
```

## Save data

```{r}
#| label: save_data

write_tsv(TCGA_exprs,
          file = "../data/02_TCGA_exprs_clean.tsv")

write_tsv(cms_labels,
          file = "../data/02_cms_labels_clean.tsv")
```
