---
title: "Building and testing SpaceRAT scaffolds for colorectal cancer consensus molecular subtypes"
author: "Puck Quarles van Ufford"
format: html
---

```{r}
#| label: seed

set.seed(8)
```

## Packages

```{r}
#| message: false
#| label: libraries

library("tidyverse")
library("spaceRAT")
library("caret")
```

## Load data

```{r}
#| message: false
#| label: load_data

TCGA_exprs <- read_delim("../data/04_TCGA_mapped.tsv")

NS_exprs <- read_delim("../data/04_NS_mapped.tsv")

cms_labels <- read_delim("../data/02_cms_labels_clean.tsv")
```

Reformat the expression data:

```{r}
#| label: reformat_data

TCGA_exprs <- TCGA_exprs |> 
  column_to_rownames("entrez")

NS_exprs <- NS_exprs |> 
  column_to_rownames("entrez")

cms_labels <- cms_labels |> 
  column_to_rownames("sample")
```

## Split data

We used 90% of the data to build the scaffold and the remaining 10% to project into the scaffold for testing.

```{r}
#| label: split_data
#| warning: false

samples <- rownames(cms_labels)

n <- length(samples)
test_set <- sample(seq_len(n), size = 0.1 * n)

TCGA_train <- TCGA_exprs |> 
  select(-test_set)
TCGA_test <- TCGA_exprs |> 
  select(test_set)

NS_train <- NS_exprs |> 
  select(-test_set)
NS_test <- NS_exprs |> 
  select(test_set)

cms_labels_train <- cms_labels |> 
  slice(-test_set)
cms_labels_test <- cms_labels |> 
  slice(test_set)
```

## SpaceRAT scaffolds for colorectal cancer

### TCGA data

Build the scaffold:

```{r}
#| label: build_TCGA_scafffold
#| message: false
#| warning: false

TCGA_scaffold <- buildScaffold(
  object = TCGA_train,
  pheno = cms_labels_train,
  colname = "cms",
  data = "exprs",
  annotation = "entrez"
)
```

Plot the scaffold in PCA space:

```{r}
#| label: plot_TCGA_scafffold
#| message: false

plotScaffold(
  scaffold = TCGA_scaffold, 
  title = "CRC Scaffold built with RNA-seq data",
  dimred = "PCA", 
  dims = c(1,2), 
  plot_mode = "dot"
)

ggsave("../results/10_TCGA_scaffold.png")
```

Test the scaffold:

```{r}
#| label: test_TCGA_scafffold
#| message: false

projectSample(
  scaffold = TCGA_scaffold,
  sample = TCGA_test,
  pheno = cms_labels_test,
  colname = "cms",
  title = "CRC Scaffold built with RNA-seq data",
  annotation = NULL
)

ggsave("../results/10_TCGA_projections.png")
```

### NanoString data

Build the scaffold:

```{r}
#| label: build_NS_scafffold
#| message: false
#| warning: false

NS_scaffold <- buildScaffold(
  object = NS_train,
  pheno = cms_labels_train,
  colname = "cms",
  data = "exprs",
  annotation = "entrez"
)
```

Plot the  scaffold in PCA space:

```{r}
#| label: plot_NS_scafffold
#| message: false

plotScaffold(
  scaffold = NS_scaffold, 
  title = "CRC Scaffold built with simulated NanoString nCounter data",
  dimred = "PCA", 
  dims = c(1,2), 
  plot_mode = "dot"
)

ggsave("../results/10_NS_scaffold.png")
```

Test the scaffold:

```{r}
#| label: test_NS_scafffold
#| message: false

projectSample(
  scaffold = NS_scaffold,
  sample = NS_test,
  pheno = cms_labels_test,
  colname = "cms",
  title = "CRC Scaffold built with simulated NanoString nCounter data",
  annotation = NULL
)

ggsave("../results/10_NS_projections.png")
```

## Classification using distance-to-centroid on scaffolds with leave-one-out cross validation

### TCGA data

```{r}
#| label: DTC_TCGA_test
#| eval: false
#| echo: false

i = 1
classes <- c("CMS1", "CMS2", "CMS3", "CMS4", "NOLBL")

# leave one out
train_exprs <- TCGA_exprs |> 
  select(-i)
test_exprs <- TCGA_exprs |> 
  select(i)
train_CMS <- cms_labels |> 
  slice(-i)
test_CMS <- cms_labels |> 
  slice(i)

# build scaffold
scaffold <- buildScaffold(
    object = train_exprs,
    pheno = train_CMS,
    colname = "cms",
    data = "exprs",
    annotation = "entrez")

# get scaffold pca and genes
pca <- scaffold$pca$x
scaffold_genes <- unique(unlist(scaffold$DEgenes))

# calculate centroids in pca space
centroids <- NULL
for (class in classes) {
  class_centroid <- data.frame(rowMeans(t(pca[train_CMS==class,])))
  centroids <- bind_cols(centroids, class_centroid)
}
colnames(centroids) <- classes

# project test sample in pca space
sample_genes <- rownames(test_exprs)
overlap_genes <- intersect(scaffold_genes, sample_genes)
test_exprs <- test_exprs[overlap_genes, ]
names(test_exprs) <- overlap_genes
ranked_sample <- rank(test_exprs)
scaffold_pca <- prcomp(t(scaffold$rank), scale. = scaffold$pca_scale)
transformed_sample <- predict(scaffold_pca, newdata = t(ranked_sample))

# calculate distance from centroids and predict label
d <- as.matrix(dist(t(bind_cols(centroids, new = t(transformed_sample)))))
CMS_pred <- names(which.min(d[1:5, 6]))

# add to results
c(test_CMS[1, 1], CMS_pred, test_CMS==CMS_pred)
```

```{r}
#| label: DTC_TCGA
#| warning: false
#| message: false

pred_table <- data.frame(matrix(ncol = 3,
                                nrow = 0))
classes <- c("CMS1", "CMS2", "CMS3", "CMS4", "NOLBL")

for(i in 1:ncol(TCGA_exprs)) {
  # leave one out
  train_exprs <- TCGA_exprs |> 
    select(-i)
  test_exprs <- TCGA_exprs |> 
    select(i)
  train_CMS <- cms_labels |> 
    slice(-i)
  test_CMS <- cms_labels |> 
    slice(i)
  
  # build scaffold
  scaffold <- buildScaffold(
      object = train_exprs,
      pheno = train_CMS,
      colname = "cms",
      data = "exprs",
      annotation = "entrez")
  
  # get scaffold pca and genes
  pca <- scaffold$pca$x
  scaffold_genes <- unique(unlist(scaffold$DEgenes))
  
  # calculate centroids in pca space
  centroids <- NULL
  for (class in classes) {
    class_centroid <- data.frame(rowMeans(t(pca[train_CMS==class,])))
    centroids <- bind_cols(centroids, class_centroid)
  }
  colnames(centroids) <- classes
  
  # project test sample in pca space
  sample_genes <- rownames(test_exprs)
  overlap_genes <- intersect(scaffold_genes, sample_genes)
  test_exprs <- test_exprs[overlap_genes, ]
  names(test_exprs) <- overlap_genes
  ranked_sample <- rank(test_exprs)
  scaffold_pca <- prcomp(t(scaffold$rank), scale. = scaffold$pca_scale)
  transformed_sample <- predict(scaffold_pca, newdata = t(ranked_sample))
  
  # calculate distance from centroids and predict label
  d <- as.matrix(dist(t(bind_cols(centroids, new = t(transformed_sample)))))
  CMS_pred <- names(which.min(d[1:5, 6]))
  
  # add to results
  pred_table <- rbind(pred_table, c(test_CMS[1, 1], CMS_pred, test_CMS==CMS_pred))
}

colnames(pred_table) <- c("CMS_true", "CMS_pred", "pred_correct")

table(pred_table$pred_correct)

NOLBL_count <- pred_table |> 
  filter(CMS_pred == "NOLBL") |> 
  nrow()

classification_rate_tcga <- c(nrow(pred_table), nrow(pred_table) - NOLBL_count, NOLBL_count)

confusion_tcga <- confusionMatrix(data = factor(pred_table$CMS_pred), 
                                   reference = factor(pred_table$CMS_true), 
                                   mode = "everything")

confusion_tcga
overall_res_tcga <- confusion_tcga$overall
by_class_res_tcga <- confusion_tcga$byClass
```

### NanoString data

```{r}
#| label: DTC_NS
#| warning: false
#| message: false

pred_table <- data.frame(matrix(ncol = 3,
                                nrow = 0))
classes <- c("CMS1", "CMS2", "CMS3", "CMS4", "NOLBL")

for(i in 1:ncol(NS_exprs)) {
  # leave one out
  train_exprs <- NS_exprs |> 
    select(-i)
  test_exprs <- NS_exprs |> 
    select(i)
  train_CMS <- cms_labels |> 
    slice(-i)
  test_CMS <- cms_labels |> 
    slice(i)
  
  # build scaffold
  scaffold <- buildScaffold(
      object = train_exprs,
      pheno = train_CMS,
      colname = "cms",
      data = "exprs",
      annotation = "entrez")
  
  # get scaffold pca and genes
  pca <- scaffold$pca$x
  scaffold_genes <- unique(unlist(scaffold$DEgenes))
  
  # calculate centroids in pca space
  centroids <- NULL
  for (class in classes) {
    class_centroid <- data.frame(rowMeans(t(pca[train_CMS==class,])))
    centroids <- bind_cols(centroids, class_centroid)
  }
  colnames(centroids) <- classes
  
  # project test sample in pca space
  sample_genes <- rownames(test_exprs)
  overlap_genes <- intersect(scaffold_genes, sample_genes)
  test_exprs <- test_exprs[overlap_genes, ]
  names(test_exprs) <- overlap_genes
  ranked_sample <- rank(test_exprs)
  scaffold_pca <- prcomp(t(scaffold$rank), scale. = scaffold$pca_scale)
  transformed_sample <- predict(scaffold_pca, newdata = t(ranked_sample))
  
  # calculate distance from centroids and predict label
  d <- as.matrix(dist(t(bind_cols(centroids, new = t(transformed_sample)))))
  CMS_pred <- names(which.min(d[1:5, 6]))
  
  # add to results
  pred_table <- rbind(pred_table, c(test_CMS[1, 1], CMS_pred, test_CMS==CMS_pred))
}

colnames(pred_table) <- c("CMS_true", "CMS_pred", "pred_correct")

table(pred_table$pred_correct)

NOLBL_count <- pred_table |> 
  filter(CMS_pred == "NOLBL") |> 
  nrow()

classification_rate_ns <- c(nrow(pred_table), nrow(pred_table) - NOLBL_count, NOLBL_count)

confusion_ns <- confusionMatrix(data = factor(pred_table$CMS_pred), 
                                reference = factor(pred_table$CMS_true), 
                                mode = "everything")

confusion_ns
overall_res_ns <- confusion_ns$overall
by_class_res_ns <- confusion_ns$byClass
```

## Save results

```{r}
#| label: save
#| warning: false

overall_res <- overall_res_tcga |> 
  rbind(overall_res_ns) |> 
  as_tibble() |> 
  mutate(data = c("TCGA", "NS"),
         model = "SpaceRAT+DTC")

write_csv(overall_res, file = "../results/10.SpaceRAT+DTC_overall.csv")

by_class_res <- by_class_res_tcga |> 
  rbind(by_class_res_ns) |> 
  as_tibble()|> 
  mutate(class = rep(c("CMS1", "CMS2", "CMS3", "CMS4", "NOLBL"), 2),
         data = c(rep("TCGA", 5), rep("NS", 5)),
         model = "SpaceRAT+DTC")

write_csv(by_class_res, file = "../results/10.SpaceRAT+DTC_byclass.csv")

classification_rate <- classification_rate_tcga |> 
  rbind(classification_rate_ns) |> 
  as_tibble() |> 
  mutate(data = c("TCGA", "NS"),
         model = "SpaceRAT+DTC")
colnames(classification_rate) <- c("n_samples", "n_classified", "n_NOLBL", "data", "model")

write_csv(classification_rate, file = "../results/10.SpaceRAT+DTC_classification_rate.csv")
```
